popRewards = [('solution48', -6.894999999999992e+201), ('solution25', -6.889999999999991e+201), ('solution90', -6.884999999999992e+201), ('solution57', -6.884999999999991e+201), ('solution7', -6.879999999999993e+201), ('solution92', -6.879999999999993e+201), ('solution80', -6.879999999999992e+201), ('solution14', -6.874999999999994e+201), ('solution62', -6.874999999999994e+201), ('solution77', -6.874999999999994e+201), ('solution44', -6.874999999999993e+201), ('solution60', -6.874999999999993e+201), ('solution74', -6.874999999999993e+201), ('solution12', -6.869999999999993e+201), ('solution31', -6.869999999999993e+201), ('solution49', -6.869999999999993e+201), ('solution59', -6.869999999999993e+201), ('solution6', -6.869999999999992e+201), ('solution82', -6.869999999999992e+201), ('solution88', -6.869999999999992e+201), ('solution97', -6.869999999999991e+201), ('solution3', -6.864999999999994e+201), ('solution47', -6.864999999999994e+201), ('solution34', -6.864999999999993e+201), ('solution45', -6.864999999999993e+201), ('solution94', -6.864999999999993e+201), ('solution98', -6.864999999999993e+201), ('solution53', -6.864999999999992e+201), ('solution5', -6.859999999999994e+201), ('solution13', -6.859999999999994e+201), ('solution26', -6.859999999999994e+201), ('solution50', -6.859999999999994e+201), ('solution70', -6.859999999999994e+201), ('solution9', -6.859999999999993e+201), ('solution30', -6.854999999999994e+201), ('solution16', -6.854999999999993e+201), ('solution65', -6.854999999999993e+201), ('solution93', -6.854999999999993e+201), ('solution21', -6.849999999999993e+201), ('solution38', -6.849999999999993e+201), ('solution61', -6.849999999999993e+201), ('solution15', -6.844999999999994e+201), ('solution71', -6.844999999999994e+201), ('solution81', -6.844999999999994e+201), ('solution0', -6.844999999999993e+201), ('solution32', -6.844999999999993e+201), ('solution85', -6.844999999999993e+201), ('solution99', -6.839999999999995e+201), ('solution23', -6.839999999999993e+201), ('solution39', -6.834999999999993e+201), ('solution46', -6.834999999999993e+201), ('solution17', -6.834999999999992e+201), ('solution41', -6.829999999999994e+201), ('solution18', -6.824999999999992e+201), ('solution37', -6.819999999999992e+201), ('solution2', -6.804999999999994e+201), ('solution58', -6.789999999999992e+201), ('solution42', -6.784999999999993e+201), ('solution43', -6.599999999999998e+201), ('solution69', -6.599999999999998e+201), ('solution33', -6.594999999999999e+201), ('solution11', -6.594999999999997e+201), ('solution24', -6.589999999999998e+201), ('solution91', -6.589999999999998e+201), ('solution51', -6.589999999999997e+201), ('solution96', -6.584999999999998e+201), ('solution68', -6.579999999999999e+201), ('solution78', -6.579999999999999e+201), ('solution79', -6.579999999999999e+201), ('solution84', -6.579999999999999e+201), ('solution72', -6.569999999999998e+201), ('solution22', -6.564999999999999e+201), ('solution40', -6.559999999999997e+201), ('solution76', -6.514999999999995e+201), ('solution28', -6.404999999999998e+201), ('solution4', -6.13e+201), ('solution19', -6.055e+201), ('solution75', -6.04e+201), ('solution89', -5.979999999999996e+201), ('solution20', -5.749999999999998e+201), ('solution52', -5.735e+201), ('solution67', -5.73e+201), ('solution36', -5.700000000000001e+201), ('solution83', -5.695000000000001e+201), ('solution87', -5.690000000000001e+201), ('solution95', -5.685000000000003e+201), ('solution27', -5.68e+201), ('solution35', -5.675000000000002e+201), ('solution73', -5.670000000000002e+201), ('solution10', -5.67e+201), ('solution8', -5.665000000000001e+201), ('solution29', -5.660000000000002e+201), ('solution56', -5.660000000000002e+201), ('solution86', -5.654999999999999e+201), ('solution1', -5.650000000000002e+201), ('solution64', -5.650000000000002e+201), ('solution55', -5.455000000000002e+201), ('solution63', -4.810000000000003e+201), ('solution54', -4.255000000000003e+201), ('solution66', -2.6600000000000014e+201)]
population = {'solution0': [[1], [7], [4], [1], [0], [4], [5], [0], [8], [4], [2], [2]], 'solution1': [[2], [0], [5], [2], [0], [4], [7], [3], [4], [6], [6], [3]], 'solution2': [[1], [8], [7], [5], [8], [1], [8], [8], [1], [8], [8], [0]], 'solution3': [[2], [1], [7], [6], [0], [7], [0], [4], [1], [2], [8], [5]], 'solution4': [[6], [7], [8], [5], [8], [0], [4], [7], [6], [2], [6], [6]], 'solution5': [[6], [6], [5], [0], [7], [7], [3], [3], [5], [6], [0], [7]], 'solution6': [[2], [4], [0], [3], [3], [5], [1], [4], [6], [3], [1], [2]], 'solution7': [[3], [6], [0], [5], [3], [1], [2], [2], [8], [1], [2], [8]], 'solution8': [[0], [1], [8], [8], [5], [1], [5], [0], [4], [1], [3], [4]], 'solution9': [[2], [6], [1], [5], [7], [1], [1], [4], [5], [3], [4], [2]], 'solution10': [[7], [7], [3], [2], [6], [2], [5], [4], [1], [8], [3], [7]], 'solution11': [[7], [2], [8], [0], [5], [5], [4], [0], [4], [0], [6], [8]], 'solution12': [[7], [3], [7], [3], [5], [5], [4], [3], [0], [0], [0], [0]], 'solution13': [[1], [1], [7], [7], [4], [5], [1], [8], [0], [2], [5], [2]], 'solution14': [[5], [1], [5], [7], [4], [4], [7], [0], [0], [5], [1], [8]], 'solution15': [[4], [2], [4], [4], [3], [0], [6], [1], [6], [0], [5], [0]], 'solution16': [[7], [1], [5], [6], [6], [0], [6], [6], [5], [4], [3], [5]], 'solution17': [[6], [5], [0], [6], [2], [5], [0], [7], [6], [1], [1], [8]], 'solution18': [[5], [6], [1], [0], [8], [6], [3], [3], [4], [0], [4], [1]], 'solution19': [[5], [4], [8], [5], [8], [7], [3], [6], [6], [6], [3], [8]], 'solution20': [[1], [5], [7], [2], [7], [7], [8], [2], [6], [3], [6], [6]], 'solution21': [[4], [3], [7], [1], [0], [7], [1], [3], [3], [4], [5], [5]], 'solution22': [[2], [7], [2], [4], [4], [2], [5], [0], [0], [1], [6], [4]], 'solution23': [[4], [6], [5], [4], [6], [2], [3], [7], [2], [6], [8], [3]], 'solution24': [[3], [5], [8], [1], [5], [7], [8], [1], [5], [6], [6], [4]], 'solution25': [[1], [4], [7], [3], [0], [6], [0], [8], [3], [7], [4], [3]], 'solution26': [[0], [8], [5], [3], [3], [4], [2], [2], [4], [5], [5], [5]], 'solution27': [[3], [1], [3], [8], [5], [0], [3], [6], [7], [3], [4], [4]], 'solution28': [[2], [4], [8], [1], [2], [1], [2], [3], [6], [5], [7], [8]], 'solution29': [[3], [2], [0], [2], [0], [6], [7], [2], [3], [7], [2], [7]], 'solution30': [[7], [0], [3], [7], [4], [4], [2], [5], [1], [5], [7], [6]], 'solution31': [[0], [4], [6], [6], [3], [3], [8], [8], [3], [3], [0], [1]], 'solution32': [[1], [5], [7], [1], [7], [1], [4], [4], [5], [0], [0], [3]], 'solution33': [[7], [6], [2], [7], [0], [6], [7], [6], [0], [7], [1], [4]], 'solution34': [[4], [2], [1], [7], [6], [3], [1], [5], [2], [2], [6], [8]], 'solution35': [[5], [0], [0], [2], [6], [8], [1], [8], [4], [4], [1], [0]], 'solution36': [[5], [4], [3], [8], [7], [6], [3], [6], [6], [7], [0], [7]], 'solution37': [[3], [8], [5], [4], [2], [7], [4], [5], [6], [7], [2], [1]], 'solution38': [[1], [0], [6], [0], [7], [6], [1], [6], [7], [4], [2], [8]], 'solution39': [[6], [8], [7], [6], [1], [0], [2], [1], [2], [5], [6], [4]], 'solution40': [[7], [0], [8], [7], [3], [4], [1], [6], [8], [0], [1], [4]], 'solution41': [[6], [4], [5], [1], [2], [3], [5], [4], [3], [5], [7], [0]], 'solution42': [[4], [5], [0], [3], [2], [1], [6], [3], [8], [4], [0], [0]], 'solution43': [[8], [5], [8], [4], [1], [2], [3], [3], [8], [2], [2], [0]], 'solution44': [[6], [1], [5], [0], [3], [0], [7], [7], [7], [0], [5], [3]], 'solution45': [[5], [1], [7], [0], [5], [5], [0], [7], [3], [2], [4], [7]], 'solution46': [[1], [1], [7], [1], [0], [8], [5], [0], [1], [4], [4], [2]], 'solution47': [[2], [0], [5], [6], [6], [1], [7], [3], [8], [6], [7], [8]], 'solution48': [[5], [5], [7], [6], [6], [3], [4], [7], [8], [4], [0], [8]], 'solution49': [[2], [6], [0], [7], [6], [0], [6], [0], [3], [2], [7], [5]], 'solution50': [[1], [8], [1], [6], [5], [6], [8], [5], [5], [8], [0], [8]], 'solution51': [[5], [1], [8], [6], [5], [3], [7], [6], [8], [4], [6], [7]], 'solution52': [[7], [4], [4], [8], [6], [5], [3], [6], [2], [4], [7], [3]], 'solution53': [[2], [8], [3], [3], [1], [5], [3], [6], [4], [6], [0], [1]], 'solution54': [[4], [4], [5], [8], [3], [2], [2], [3], [6], [0], [0], [6]], 'solution55': [[8], [2], [1], [2], [6], [2], [5], [7], [2], [0], [1], [6]], 'solution56': [[3], [8], [0], [8], [5], [5], [7], [5], [2], [6], [2], [3]], 'solution57': [[6], [3], [6], [0], [4], [5], [1], [1], [1], [7], [7], [2]], 'solution58': [[3], [1], [4], [4], [8], [5], [7], [3], [0], [5], [5], [1]], 'solution59': [[6], [8], [5], [4], [3], [6], [4], [1], [5], [5], [1], [7]], 'solution60': [[2], [8], [7], [0], [4], [2], [7], [3], [4], [3], [7], [7]], 'solution61': [[7], [3], [6], [5], [4], [1], [5], [6], [1], [5], [7], [0]], 'solution62': [[3], [6], [7], [6], [0], [1], [7], [8], [8], [0], [7], [4]], 'solution63': [[2], [0], [0], [5], [2], [8], [8], [3], [3], [5], [7], [0]], 'solution64': [[2], [7], [5], [2], [7], [0], [8], [7], [0], [4], [2], [0]], 'solution65': [[6], [4], [4], [5], [7], [3], [6], [0], [2], [3], [0], [1]], 'solution66': [[4], [4], [8], [8], [2], [2], [2], [3], [7], [3], [2], [5]], 'solution67': [[4], [3], [7], [2], [7], [4], [1], [2], [6], [7], [8], [3]], 'solution68': [[2], [5], [8], [5], [6], [4], [8], [1], [3], [7], [8], [3]], 'solution69': [[1], [0], [8], [6], [4], [6], [1], [0], [6], [1], [3], [2]], 'solution70': [[4], [3], [5], [7], [3], [4], [3], [1], [4], [1], [4], [1]], 'solution71': [[8], [2], [3], [5], [3], [3], [6], [4], [3], [4], [8], [6]], 'solution72': [[5], [3], [2], [3], [0], [0], [2], [4], [4], [1], [1], [4]], 'solution73': [[7], [5], [3], [8], [0], [4], [5], [8], [6], [5], [6], [7]], 'solution74': [[2], [4], [1], [1], [0], [3], [3], [1], [0], [8], [8], [5]], 'solution75': [[2], [3], [8], [0], [8], [0], [5], [8], [4], [5], [8], [7]], 'solution76': [[7], [4], [7], [6], [8], [8], [3], [5], [0], [4], [2], [5]], 'solution77': [[0], [4], [4], [4], [0], [2], [3], [3], [3], [3], [2], [4]], 'solution78': [[0], [8], [2], [0], [1], [6], [6], [6], [1], [1], [1], [4]], 'solution79': [[0], [0], [8], [7], [1], [1], [7], [0], [2], [7], [1], [8]], 'solution80': [[5], [4], [4], [5], [5], [2], [2], [3], [2], [5], [2], [4]], 'solution81': [[6], [0], [6], [1], [3], [8], [6], [8], [5], [0], [0], [4]], 'solution82': [[2], [7], [5], [5], [6], [8], [1], [7], [5], [0], [0], [8]], 'solution83': [[3], [7], [0], [8], [1], [4], [8], [0], [8], [7], [7], [5]], 'solution84': [[1], [4], [2], [7], [0], [7], [4], [7], [8], [8], [8], [3]], 'solution85': [[0], [6], [6], [0], [1], [2], [0], [3], [3], [8], [1], [8]], 'solution86': [[6], [6], [1], [2], [7], [1], [7], [7], [6], [4], [5], [3]], 'solution87': [[4], [0], [2], [2], [7], [6], [8], [6], [6], [0], [8], [5]], 'solution88': [[6], [4], [4], [5], [7], [6], [1], [4], [3], [5], [1], [4]], 'solution89': [[3], [5], [8], [5], [7], [8], [8], [8], [4], [0], [8], [5]], 'solution90': [[2], [6], [3], [4], [3], [4], [4], [0], [6], [0], [8], [2]], 'solution91': [[4], [5], [8], [4], [4], [6], [8], [0], [1], [7], [7], [8]], 'solution92': [[5], [8], [1], [3], [7], [7], [4], [5], [8], [5], [4], [2]], 'solution93': [[2], [7], [3], [3], [1], [5], [8], [3], [6], [3], [6], [4]], 'solution94': [[8], [7], [7], [1], [2], [3], [7], [0], [0], [3], [6], [8]], 'solution95': [[4], [3], [3], [2], [5], [4], [0], [6], [3], [8], [2], [0]], 'solution96': [[3], [2], [8], [5], [1], [5], [7], [6], [3], [4], [0], [8]], 'solution97': [[1], [7], [4], [4], [8], [4], [6], [5], [0], [5], [2], [4]], 'solution98': [[4], [0], [5], [5], [0], [2], [7], [1], [0], [0], [5], [5]], 'solution99': [[0], [5], [7], [5], [1], [1], [0], [1], [1], [4], [3], [3]]}

import random

def crossover(rewards, population):
    for i in range(len(rewards)):
        if i % 2 == 0:
            solution1 = population[rewards[i][0]]
            solution2 = population[rewards[i+1][0]]

            crossoverPoint1 = random.randint(0, len(solution1))

            while True:
                crossoverPoint2 = random.randint(0, len(solution2))
                if crossoverPoint2 != crossoverPoint1:
                    break

            if crossoverPoint1 > crossoverPoint2:
                temp = crossoverPoint1
                crossoverPoint1 = crossoverPoint2
                crossoverPoint2 = temp

            tempSolution1 = []
            tempSolution2 = []
            
            for j in range(len(solution1)):
                if j < crossoverPoint1:
                    tempSolution1.append(solution1[j])
                    tempSolution2.append(solution2[j])
                elif j >= crossoverPoint1 and j <= crossoverPoint2:
                    tempSolution1.append(solution2[j])
                    tempSolution2.append(solution1[j])
                else:
                    tempSolution1.append(solution1[j])
                    tempSolution2.append(solution2[j])

            population[rewards[i][0]] = tempSolution1
            population[rewards[i+1][0]] = tempSolution2

            break

            
    return population

population = crossover(rewards=popRewards, population=population)

